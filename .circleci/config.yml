version: 2.1

orbs:
  docker: circleci/docker@1.5.0

jobs:
  release:
    docker:
      - image: harbor.k8s.libraries.psu.edu/library/ci-utils:$CI_UTILS_IMAGE_TAG
    environment:
      REGISTRY_HOST: harbor.k8s.libraries.psu.edu
      REGISTRY_REPO: library/scholarsphere
      GITHUB_USER: 'psu-stewardship-bot'
      CONFIG_REPO: git@github.com:psu-libraries/scholarsphere-config.git
    steps:
      - add_ssh_keys
      - run:
          name: "Release"
          command: |
            /usr/local/bin/tag-image
            ssh-keyscan github.com > ~/.ssh/known_hosts
            git clone $CONFIG_REPO
            cd scholarsphere-config
            /usr/local/bin/pr-release clusters/prod/manifests/scholarsphere/prod.yaml

  publish:
    docker:
      - image: harbor.k8s.libraries.psu.edu/library/ci-utils:$CI_UTILS_IMAGE_TAG
        user: root
    steps:
      - setup_remote_docker:
          version: 20.10.6
          docker_layer_caching: true
      - checkout
      - docker/check:
          registry: harbor.k8s.libraries.psu.edu
      - docker/build:
          image: library/scholarsphere
          registry: harbor.k8s.libraries.psu.edu
          extra_build_args: "--target production"
      - docker/push:
          digest-path: /tmp/digest.txt
          image: library/scholarsphere
          registry: harbor.k8s.libraries.psu.edu
      - run:
          command: |
            echo "Digest is: $(</tmp/digest.txt)"
  deploy:
    docker:
      - image: harbor.k8s.libraries.psu.edu/library/ci-utils:$CI_UTILS_IMAGE_TAG
    environment:
      CONFIG_REPO: git@github.com:psu-libraries/scholarsphere-config.git
    steps:
      - add_ssh_keys
      - run:
          name: "Updating Config Repo"
          command: |
            ssh-keyscan github.com > ~/.ssh/known_hosts
            git clone $CONFIG_REPO
            cd scholarsphere-config
            ./generate_circle_application.sh
  test:
    docker:
      - image: circleci/ruby:2.7.5-buster-node-browsers
      - image: redis:6.2.6
      - image: minio/minio:RELEASE.2021-03-17T02-33-02Z
        entrypoint:
        - /bin/sh
        - -c
        - mkdir -p /data/scholarsphere; minio --compat server --address ':9000' /data
        environment:
          MINIO_ACCESS_KEY: scholarsphere
          MINIO_SECRET_KEY: scholarsphere
      - image: postgres:11.8
        environment:
          POSTGRES_PASSWORD: scholarsphere
          POSTGRES_USER: scholarsphere
          POSTGRES_DB: scholarsphere
      - image: solr:8.11.1-slim
        command: [
          "/bin/bash",
          "-c",
          "solr -c && solr auth enable -credentials scholarsphere:scholarsphere -z localhost:9983; solr stop && solr -c -f",
        ]
    environment:
      RAILS_ENV: test
      AWS_ACCESS_KEY_ID: scholarsphere
      AWS_SECRET_ACCESS_KEY: scholarsphere
      S3_ENDPOINT: http://localhost:9000
      AWS_BUCKET: scholarsphere
      AWS_REGION: us-east-1
      SOLR_HOST: 127.0.0.1
      SOLR_COLLECTION: scholarsphere
      SOLR_PASSWORD: scholarsphere
      SOLR_USERNAME: scholarsphere
      POSTGRES_USERNAME: scholarsphere
      POSTGRES_PASSWORD: scholarsphere
      POSTGRES_DB: scholarsphere
      POSTGRES_HOST: 127.0.0.1
    steps:
    - checkout
    - restore_cache:
        keys:
          - bundle1-{{ checksum "Gemfile.lock" }}
    - restore_cache:
        keys:
          - yarn1-{{ checksum "yarn.lock" }}
    - run:
        name: "Update Node.js and npm"
        command: |
          curl -sSL "https://nodejs.org/dist/v16.13.1/node-v16.13.1-linux-x64.tar.xz" | sudo tar --strip-components=2 -xJ -C /usr/local/bin/ node-v16.13.1-linux-x64/bin/node
          curl https://npmjs.com/install.sh | sudo bash
    - run:
        name: "Install dependencies for thumbnails"
        command: | 
          sudo apt-get update
          sudo apt-get install -y imagemagick ghostscript libreoffice
          sudo cp config/policy.xml /etc/ImageMagick-6/policy.xml
    - run:
        name: "Bundle"
        command: |
          gem install bundler
          bundle check --path vendor/bundle || bundle install --deployment
    - run:
        name: "Yarn"
        command: |
          yarn install --cache-folder ~/.cache/yarn --frozen-lockfile
    - run:
        name: "Wait for Redis"
        command: dockerize -wait tcp://localhost:6379 -timeout 1m
    - run:
        name: "Wait for Solr"
        command: dockerize -wait tcp://localhost:8983 -timeout 2m
    - save_cache:
        paths:
          - vendor/bundle
        key: bundle1-{{ checksum "Gemfile.lock" }} 
    - save_cache:
        key: yarn1-{{ checksum "yarn.lock" }}
        paths:
          - ~/.cache/yarn
    - run:
        name: "Lint"
        command: |
          bundle exec niftany
          yarn lint
    - run:
        name: "Jest"
        command: |
          yarn test
    - run:
        name: "RSpec"
        command: |
          ./bin/ci-rspec

workflows:
  version: 2
  scholarsphere:
    jobs:
      - release:
          context:
            - org-global
          name: "Release"
          filters:
            tags:
              only:
                - /^v\d+.\d+.\d+.*/
            branches:
              ignore:
                - /.*/
      - test
      - publish:
          context: 
            - org-global
          filters:
            branches:
              only:
                - develop
                - main
                - /preview\/.*/
      - deploy:
          context: 
            - org-global
          requires:
            - test
            - publish
          filters:
            branches:
              only:
                - develop
                - main
                - /preview\/.*/
